AWSTemplateFormatVersion: '2010-09-09'

Parameters:
    KeyName:
        Type: AWS::EC2::KeyPair::KeyName
        # nvirginia
        Default: kensaku_root_kensaku_admin_nvirginia
        # oregon
        # Default: kensaku_root_kensaku_admin_oregon
        Description: names of an existing EC2 KeyPair
    EnvType:
        Description: Environment type
        Type: String
        Default: dev
        AllowedValues: [prod, dev, test]
        ConstraintDescription: must specify prod, dev, or test

Mappings:
    # source: https://docs.aws.amazon.com/general/latest/gr/rande.html
    # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/gettingstarted.templatebasics.html
    # the following AMI id may change by time. check the current id when running this file
    RegionMap:
        # nvirginia
        us-east-1:
            # ubuntu 18.04
            AMIImageId: ami-024a64a6685d05041
            # Amazon Linux 2
            # AMIImageId: <check the newest id>
        # oregon
        us-west-2:
            # ubuntu 18.04
            AMIImageId: ami-0c579621aaac8bade
        # # tokyo region
        # ap-northeast-1:
        #     # ubuntu 18.04
        #     AMIImageId: <check the newest id>

Resources:
    #####################################################################
    ########## log receiver ec2 instance Launch Template start ##########
    #####################################################################
    LaunchTemplateLogReceiver:
        Type: AWS::EC2::LaunchTemplate
        Properties:
            LaunchTemplateName: !Sub "${AWS::StackName}-LogReceiver-${EnvType}"
            LaunchTemplateData:
                ###### spot fleet specific params start ######
                # InstanceMarketOptions:
                #     MarketType: spot
                ###### spot fleet specific params end ######
                # ImageId: !Ref AMIImageId
                ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMIImageId]
                InstanceType: t3a.medium
                KeyName: !Ref KeyName
                EbsOptimized: true
                BlockDeviceMappings:
                    -
                        DeviceName: "/dev/sda1"
                        # DeviceName: "/dev/xvda"
                        Ebs:
                          # todo: check if you want to change the blockstorage mode (having mor io)
                          VolumeType: "gp2"
                          # VolumeType: "io1"
                          # Iops: "200"
                          DeleteOnTermination: true
                          # Unit = GB
                          VolumeSize: 15
                NetworkInterfaces:
                    - AssociatePublicIpAddress: false
                      DeleteOnTermination: true
                      DeviceIndex: 0
                      # list of the names of the scurity groups
                      # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-network-iface-embedded.html
                      Groups:
                          - !ImportValue SecurityGroupIdForPrivateSubnetInstances
                      # subnet attached to this ec2 instance
                      # this cannot be defined by the template file cus it differs from AZs -> SubnetId: !ImportValue SecurityGroupIdForPrivateSubnetInstances
                Monitoring:
                    Enabled: true

                # IAM role
                IamInstanceProfile:
                    Arn: !ImportValue IAMS3TempLogBucketAccessFromLogstashProfileArn 

                # TagSpecifications:
                # - ResourceType: instance
                #   Tags:
                #   - Key: Name
                #     Value: !Sub "${AWS::StackName}-logReceiver-SpotInstance"
                UserData:
                  # UserData: !Base64
                  #     Fn::Sub: '#!/bin/bash -x
                  Fn::Base64:
                    Fn::Join:
                    - "\n"
                    - - Fn::Sub: # Fn::Sub としての変数展開が必要ある部分
                        - |
                            #!/bin/bash -xe
                            export HOME=/root
                            # env variable setting to install cfn-init packages and apt-get upgrade without manual interaction https://bugs.launchpad.net/ubuntu/+source/eglibc/+bug/935681
                            export DEBIAN_FRONTEND=noninteractive

                            apt-get -y update

                            # change time zone 
                            #  timedatectl set-timezone Asia/Tokyo
                            timedatectl set-timezone UCT

                            ############################
                            # install packages for cfn-init (https://gist.github.com/mmasko/66d34b651642525c63cd39251e0c2a8b)
                            apt-get -y install python-setuptools
                            mkdir -p /opt/aws/bin
                            python /usr/lib/python2.7/dist-packages/easy_install.py --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
                            # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/quickref-general.html
                            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchTemplateLogReceiver --configsets setup --region ${AWS::Region} --role ${IamInstanceRole}
                            ############################

                            # install aws cli for endpoint connection
                            apt-get install -y awscli

                            # set the region: https://docs.aws.amazon.com/cli/latest/reference/configure/set.html
                            aws configure set default.region ${AWS::Region}
                            
                            # the aws cloudformation variable used in the following commands. 
                            envType=${EnvType}

                        -
                          IamInstanceRole:
                            # https://medium.com/pablo-perez/how-do-i-import-a-stack-export-value-within-userdata-in-another-stack-9084b206897d
                            # http://websitenotebook.blogspot.com/2017/06/importvalue-in-userdata-with-yaml.html
                            !ImportValue IAMS3TempLogBucketAccessRoleId
                            # !ImportValue IAMS3FullAccessRoleId/

                      - | # Fn::Sub としての変数展開が必要ない部分
                        # install docker
                        apt-get install docker.io -y

                        # get the secret parameters from AWS Systems Manager
                        # https://qiita.com/unhurried/items/c62d29540de3e10a50ad
                        # https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/cli-usage-output.html#cli-usage-output-filter
                        apt-get install -y jq
                        # https://qiita.com/Ping/items/57fd75465dfada76e633
                        GitlabUserName=`aws ssm get-parameter --name "/${envType}/GitlabUserName" --with-decryption --query "Parameter.Value" --output text`
                        GitlabPassword=`aws ssm get-parameter --name "/${envType}/GitlabPassword" --with-decryption --query "Parameter.Value" --output text`

                        # register the user name and password to clone the repository
                        # echo "https://`aws ssm get-parameter --name "/dev/GitlabUserName" --with-decryption --query "Parameter.Value"`:`aws ssm get-parameter --name "/dev/GitlabPassword" --with-decryption --query "Parameter.Value"`@gitlab.com" >> /root/.git-credentials
                        echo "https://${GitlabUserName}:${GitlabPassword}@gitlab.com" >> /root/.git-credentials

                        git config --global credential.helper store

                        # clone the repository for Dockerfile
                        git clone https://gitlab.com/${GitlabUserName}/aws_cloud_log_collection.git /home/ubuntu/logstashDocker

                      - Fn::Sub: | # Fn::Sub としての変数展開が必要ある部分
                          # change the s3 bucket name according to the env type 
                          sed -i "s/"logs-temp-log-bucket"/logs-temp-log-bucket-${EnvType}/" /home/ubuntu/logstashDocker/dockerLogstash/DockerfileLogstashReceiverHTTPS

                      - | # Fn::Sub としての変数展開が必要ない部分
                        ########### watching memory and disk usage setting start ############
                        # https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/mon-scripts.html
                        # https://qiita.com/mitsubachi/items/4b7e3449bbe04e403a9d
                        # https://blog.mmmcorp.co.jp/blog/2018/05/19/cloudwatch_custom_metrics/
                        apt-get update
                        apt-get install unzip -y
                        apt-get install libwww-perl libdatetime-perl -y
                        # download and unzip the monitoring code
                        curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip -O
                        unzip CloudWatchMonitoringScripts-1.2.2.zip
                        rm CloudWatchMonitoringScripts-1.2.2.zip
                        # cd aws-scripts-mon
                        
                        # set commands to crontab (https://stackoverflow.com/questions/37458287/how-to-run-a-cron-job-inside-a-docker-container https://qiita.com/yamikoo@github/items/64c7cd6f2918311a5b0c https://qiita.com/kkoito/items/28d9a453c425b08738d2)
                        touch /var/log/cron.log
                        mkdir -p /etc/cron.minutely
                        echo "*/1 * * * * /aws-scripts-mon/mon-put-instance-data.pl --mem-util --mem-used-incl-cache-buff --mem-avail --disk-space-util --disk-path=/ --from-cron >> /var/log/cron.log 2>&1"  >> /etc/cron.minutely/CloudWatchMetricsForMemoryAndDiskUsage
                        chmod 0644 /etc/cron.minutely/CloudWatchMetricsForMemoryAndDiskUsage
                        # Apply cron job
                        crontab /etc/cron.minutely/CloudWatchMetricsForMemoryAndDiskUsage
                        ############ watching memory and disk usage setting end ############

                        apt-get -y upgrade

                        ########### HTTP connection start ###########
                        # change the access permission of Dockerfile
                        # chmod 755 /home/ubuntu/logstashDocker/dockerLogstash/DockerfileLogstashReceiverHTTP
                        # build the docker image
                        # docker build -t logstash-receiver-https-ubuntu --force-rm=true -f /home/ubuntu/logstashDocker/dockerLogstash/DockerfileLogstashReceiverHTTP /home/ubuntu/logstashDocker/dockerLogstash
                        # create the docker container
                        # docker run -itd -p 80:80 logstash-receiver-http-ubuntu
                        ########### HTTP connection end ###########

                        ########### HTTPS connection start ###########
                        # change the access permission of Dockerfile
                        # chmod 755 /home/ubuntu/logstashDocker/dockerLogstash/DockerfileLogstashReceiverHTTPS
                        # build the docker image
                        docker build -t logstash-receiver-https-ubuntu --force-rm=true -f /home/ubuntu/logstashDocker/dockerLogstash/DockerfileLogstashReceiverHTTPS /home/ubuntu/logstashDocker/dockerLogstash
                        # create the docker container
                        docker run -itd -p 443:443 -v /home/ubuntu/logstashDocker/userInfo:/home/AWS/userInfo logstash-receiver-https-ubuntu
                        ########### HTTPS connection end ###########
                                
        Metadata:
            # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html
            # https://gist.github.com/mmasko/66d34b651642525c63cd39251e0c2a8b
            # https://github.com/awsdocs/aws-cloudformation-user-guide/blob/master/doc_source/aws-resource-init.md

            AWS::CloudFormation::Init:
                configSets:
                    setup:
                        - "configure_cfn"
                configure_cfn:
                    commands:
                        test:
                            command: echo "test CloudFormation::Init pacakage installed and tested" >> /root/cfn-init-test.txt
    #####################################################################
    ########## log receiver ec2 instance Launch Template end ##########
    #####################################################################

Outputs:
    LaunchTemplateLogReceiverId:
        Value: !Ref LaunchTemplateLogReceiver
        Export:
            Name: LaunchTemplateLogReceiverId
    LaunchTemplateLogReceiverLatestNumber:
        Value: !GetAtt LaunchTemplateLogReceiver.LatestVersionNumber
        Export:
            Name: LaunchTemplateLogReceiverLatestNumber
